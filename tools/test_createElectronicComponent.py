# Generated by Selenium IDE
from docx.api import Document
import os
import sys
import pytest
import os
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


def newDevice(self, name, description ):
  WebDriverWait(driver,10).until(expected_conditions.presence_of_element_located((By.CLASS_NAME, "addlink")))
  driver.find_element(By.CSS_SELECTOR, "li > .addlink").click()
  driver.find_element(By.ID, "id_deviceName").click()
  driver.find_element(By.ID, "id_deviceName").send_keys(name)
  driver.find_element(By.ID, "id_deviceType").click()
  dropdown =  driver.find_element(By.ID, "id_deviceType")
  dropdown.find_element(By.XPATH, "//option[. = 'Sensores']").click()
  driver.find_element(By.ID, "id_deviceDescription").click()
  driver.find_element(By.ID, "id_deviceDescription").send_keys(description)
  dropdown =  driver.find_element(By.ID, "id_deviceCategories")
  dropdown.find_element(By.XPATH, "//option[. = 'Sensor de temperatura']").click()
  driver.find_element(By.ID, "id_workingVoltage").click()
  driver.find_element(By.ID, "id_workingVoltage").click()
  driver.find_element(By.ID, "id_workingVoltage").send_keys("5")
  driver.find_element(By.ID, "id_workingCurrent").click()
  driver.find_element(By.ID, "id_workingCurrent").send_keys("5")
  driver.find_element(By.NAME, "_save").click()
  WebDriverWait(driver,10).until(expected_conditions.presence_of_element_located((By.XPATH, "//table[@id=\'result_list\']/tbody/tr/th/a")))
  assert  driver.find_element(By.XPATH, "//table[@id=\'result_list\']/tbody/tr/th/a").text == name     


driver = webdriver.Chrome(executable_path=os.path.abspath("tools/chromedriver.exe"))
driver.get("http://127.0.0.1:8000/admin/")
driver.set_window_size(1536, 840)
#driver.get("https://kurio7.pythonanywhere.com//admin/login/?next=/admin/")
driver.set_window_size(1536, 840)
driver.find_element(By.ID, "id_username").send_keys("alvaroarchilla")
driver.find_element(By.ID, "id_password").send_keys("vetpalispe")
driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
driver.find_element(By.LINK_TEXT, "ElectronicComponents").click()
outputDocument=Document()

document = Document(os.path.abspath("tools/outputDocument.docx"))
#print(os.path.abspath("tools/DeviceListWithDescription.docx"))
firstTime=0
deviceList=[
  ["<DeviceName>","<DeviceDescription>", "<WorkingVoltage>", "<WorkingCurrent>", "<ApproximatedPrice>"],
]


for p in document.paragraphs:
    try:
        if p.text.startswith("Working") or p.text.startswith("Description") or p.text.startswith("Approximated"):
            outputDocument.add_paragraph(p.text)
            if p.text.startswith("Description"):
                x = p.text.split("Description: ")
                description= x[1]
            if p.text.startswith("Working Voltage:"):
                x = p.text.split("Working Voltage: ")
                workingVoltage= x[1]                
            if p.text.startswith("Working Current: "):
                x = p.text.split("Working Current: ")
                workingCurrent= x[1]
            if p.text.startswith("Approximated Price: "):
                x = p.text.split("Approximated Price:  ")
                approximatedPrice= x[1]
                deviceList.append([deviceName,description,workingVoltage, workingCurrent])
        else:
           # outputDocument.add_heading(p.text,2)
            deviceName=p.text
            print(p.text)
           # if firstTime==1:
              #newDevice(driver, p.text, description )
    
            firstTime=1
            
            
                                 
    except:
            x = p.text.split("Approximated Price: ")
            approximatedPrice= x[1]
            deviceList.append([deviceName,description,workingVoltage, workingCurrent, approximatedPrice])
            print(p.text)
print(deviceList)        
outputDocument.save('outputDocument.docx')             
#document.save('your_doc_name.docx')
print("Previous file was corrupted or didn't exist - new file was created.")




for device in deviceList:
  newDevice(driver,device[0],device[1])
  
driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
     

     
class TestCreateElectronicComponent():
  def setup_method(self, method):
    print(os.path.abspath("tools/chromedriver.exe"))
    self.driver = webdriver.Chrome(executable_path=os.path.abspath("tools/chromedriver.exe"))
    self.vars = {}
  
  #def teardown_method(self, method):
 #   self.driver.quit()
  
