# Generated by Selenium IDE
from docx.api import Document
import os
import pytest
import os
import json
import glob
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


def newDevice(self, name, description ):
  WebDriverWait(driver,10).until(expected_conditions.presence_of_element_located((By.CLASS_NAME, "addlink")))
  driver.find_element(By.CSS_SELECTOR, "li > .addlink").click()
  driver.find_element(By.ID, "id_deviceName").click()
  driver.find_element(By.ID, "id_deviceName").send_keys(name)
  driver.find_element(By.ID, "id_deviceType").click()
  dropdown =  driver.find_element(By.ID, "id_deviceType")
  dropdown.find_element(By.XPATH, "//option[. = 'Sensores']").click()
  driver.find_element(By.ID, "id_deviceDescription").click()
  driver.find_element(By.ID, "id_deviceDescription").send_keys(description)
  dropdown =  driver.find_element(By.ID, "id_deviceCategories")
  dropdown.find_element(By.XPATH, "//option[. = 'Sensor de temperatura']").click()
  driver.find_element(By.ID, "id_workingVoltage").click()
  driver.find_element(By.ID, "id_workingVoltage").click()
  driver.find_element(By.ID, "id_workingVoltage").send_keys("5")
  driver.find_element(By.ID, "id_workingCurrent").click()
  driver.find_element(By.ID, "id_workingCurrent").send_keys("5")
  driver.find_element(By.NAME, "_save").click()
  WebDriverWait(driver,10).until(expected_conditions.presence_of_element_located((By.XPATH, "//table[@id=\'result_list\']/tbody/tr/th/a")))
  assert  driver.find_element(By.XPATH, "//table[@id=\'result_list\']/tbody/tr/th/a").text == name     

def getImageList(imageList,folder_dir):
 # get the path or directory
             # folder_dir = "tools"
              for images in os.listdir(folder_dir):
              
                  # check if the image ends with png or jpg or jpeg
                  if (images.endswith(".png") or images.endswith(".jpg")\
                      or images.endswith(".jpeg")):
                      # display
                      imageList.append(images)
              print("IMAGE LIST:\n")        
              print(imageList)

def getPostFolderList(postFolderList):
 # get the path or directory
              folder_dir = "tools"
              for folder in os.listdir(folder_dir):
                if os.path.isdir(folder):
                      # display
                      postFolderList.append(folder)
              print("POST FOLDER LIST:\n")
              print(postFolderList)

def listdirs(rootdir, postFolderList):
    for file in os.listdir(rootdir):
        d = os.path.join(rootdir, file)
        if os.path.isdir(d):
            getImageList(imageList,d)
            postFolderList.append(d)
            print(d)
            #listdirs(d)
    print("POST FOLDER LIST:\n")
    print(postFolderList)
    
driver = webdriver.Chrome(executable_path=os.path.path("tools/chromedriver.exe"))
driver.get("http://kurio7.pythonanywhere.com/admin/")
#driver.get("https://kurio7.pythonanywhere.com//admin/login/?next=/admin/")
driver.set_window_size(1536, 840)
driver.find_element(By.ID, "id_username").send_keys("alvaroarchilla")
driver.find_element(By.ID, "id_password").send_keys("vetpalispe")
driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
driver.find_element(By.LINK_TEXT, "ElectronicComponents").click()


#print(os.path.abspath("tools/DeviceListWithDescription.docx"))

deviceList=[
  ["<DeviceName>","<DeviceDescription>", "<WorkingVoltage>", "<WorkingCurrent>", "<ApproximatedPrice>"],
]
imageList=[]
postFolderList=[]
imageIndex=0
list_subfolders_with_paths = [f.path for f in os.scandir() if f.is_dir()]
#print(list_subfolders_with_paths)
listdirs("./tools/Post", postFolderList)
for postFolder in postFolderList:
  

  outputDocument=Document()
  document = Document(os.path.abspath("tools/postExample.docx"))

  #getImageList(imageList)
  #getPostFolderList(postFolderList)

  for p in document.paragraphs:
      try:
        if p.style.name.startswith("Heading 1"):
                  outputDocument.add_heading(p.text,1)
                  postName=p.text.replace(" ", "_")
                  print(p.style.name)
        elif p.style.name.startswith("Heading 2"):
                  outputDocument.add_heading(p.text,2)
                  print(p.style.name)
        else:
            # outputDocument.add_heading(p.text,2)
              if p.text.startswith("[IMAGE"):
                outputDocument.add_picture("tools/"+imageList[imageIndex])
                imageIndex+=1
              outputDocument.add_paragraph(p.text)
              #print(p.style.name)                                  
      except:
              print("Except")
          
  outputDocument.save(postName+'_createdPost.docx')             
#document.save('your_doc_name.docx')
print("Previous file was corrupted or didn't exist - new file was created.")

driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
     
class TestCreateElectronicComponent():
  def setup_method(self, method):
    print(os.path.abspath("tools/chromedriver.exe"))
    self.driver = webdriver.Chrome(executable_path=os.path.abspath("tools/chromedriver.exe"))
    self.vars = {}
  
  #def teardown_method(self, method):
 #   self.driver.quit()
  
