# Generated by Selenium IDE
from docx.api import Document
import os
import pytest
import os
import json
import glob
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.select import Select


def newPost(
    name,
    description,
    postCategory,
    postSubcategories,
    postMainsubcategory,
    postDeviceList,
    postImageList,
):
    WebDriverWait(driver, 10).until(
        expected_conditions.presence_of_element_located((By.CLASS_NAME, "addlink"))
    )
    driver.find_element(By.CSS_SELECTOR, ".model-post .addlink").click()
    driver.find_element(By.ID, "id_title").send_keys(name)
    driver.find_element(By.ID, "id_description").send_keys(description)
    WebDriverWait(driver, 10).until(
        expected_conditions.presence_of_element_located((By.ID, "id_cloudinaryimg"))
    )
    driver.find_element(By.ID, "id_cloudinaryimg").send_keys(
        os.path.abspath("./CreatePostInput/" + postImageList[0])
    )

    dropdown = driver.find_element(By.ID, "id_author")
    dropdown.find_element(By.XPATH, "//option[. = 'alvaroarchilla']").click()

    categorias = driver.find_elements(By.XPATH, "//*[@id='id_categorias']/option")
    for categoria in categorias:
        if categoria.text == postCategory:
            print(postCategory)
            categoria.click()

    subcategorias = driver.find_elements(By.XPATH, "//*[@id='id_subcategorias']/option")
    for postSubcategory in postSubcategories:
        for subcategoria in subcategorias:
            if postSubcategory == subcategoria.text:
                print(subcategoria.text)
                subcategoria.click()

    subcategoriasPrincipal = driver.find_elements(
        By.XPATH, "//*[@id='id_subcategoriaprincial']/option"
    )
    for subcategoriaPrincipal in subcategoriasPrincipal:
        if postMainsubcategory == subcategoriaPrincipal.text:
            print(subcategoriaPrincipal.text)
            subcategoriaPrincipal.click()

    deviceList = driver.find_elements(
        By.XPATH, "//*[@id='id_electronic_components']/option"
    )          

    if postDeviceList != []:
        for postDevice in postDeviceList:
            for device in deviceList:
                if postDevice == device.text:
                    print(device.text)
                    device.click()

    driver.find_element(By.NAME, "_save").click()
    WebDriverWait(driver, 30).until(
        expected_conditions.presence_of_element_located(
            (By.XPATH, "//table[@id='result_list']/tbody/tr/th/a")
        )
    )
    assert (
        driver.find_element(By.XPATH, "//table[@id='result_list']/tbody/tr/th/a").text
        == name
    )
    createPostSection(name, postImageList, postContent)


def getImageList(imageList):
    # get the path or directory
    # folder_dir = "tools"
    for images in os.listdir(
        r"C:\Users\Kurio\Desktop\1.Proyectos Personales\Web personal\X. Web final subida a herokuapp\DjangoWeb\tools\CreatePostInput"
    ):
        # check if the image ends with png or jpg or jpeg
        if (
            images.endswith(".png")
            or images.endswith(".jpg")
            or images.endswith(".jpeg")
        ):
            # display
            imageList.append(images)
    print("IMAGE LIST:")
    print(imageList)


def createPostSection(name, postImageList, postContent):
 
    driver.find_element(By.CSS_SELECTOR, ".model-postsection .addlink").click()
    relatedPosts = driver.find_elements(By.XPATH, "//*[@id='id_relatedPost']/option")
    for relatedPost in relatedPosts:
        if name == relatedPost.text:
            relatedPost.click()

    frameCount = 0
    imageCount = 1
    title = ""
    sectionTitle = ""

    for content in postContent:
        # Style h1=sectionTitle, h2=title
        print(content[1])
        if content[0] == "sectionTitle":
            if sectionTitle != content[1] and sectionTitle !="" :
                print("[Nuevo postSection por sectionTitle]")
                driver.find_element(By.NAME, "_save").click()
                WebDriverWait(driver, 30).until(
                    expected_conditions.presence_of_element_located(
                        (By.XPATH, "//table[@id='result_list']/tbody/tr/th/a")
                    )
                )
                driver.find_element(
                    By.XPATH, "//*[@id='nav-sidebar']/div[2]/table/tbody/tr[7]/td/a"
                ).click()
                relatedPosts = driver.find_elements(
                    By.XPATH, "//*[@id='id_relatedPost']/option"
                )
                for relatedPost in relatedPosts:
                    if name == relatedPost.text:
                        relatedPost.click()
                
                WebDriverWait(driver, 30).until(
                    expected_conditions.presence_of_element_located(
                        (By.ID, "id_sectionTitle")
                    )
                )
                driver.find_element(By.ID, "id_sectionTitle").send_keys(content[1])
                driver.find_element(By.ID, "id_title").send_keys(title)
            else:
                print("New Section Title == Current section title")
                driver.find_element(By.ID, "id_sectionTitle").send_keys(content[1])
                driver.find_element(By.ID, "id_title").send_keys(title)
            sectionTitle = content[1]    
        if content[0] == "Title":
            # driver.find_element(By.ID, "id_title").send_keys(content[1])
            title = content[1]
            if frameCount > 0:
                print("[Nuevo postSection por Title y frame>0]")
                frameCount = 0
                driver.find_element(By.NAME, "_save").click()
                WebDriverWait(driver, 30).until(
                    expected_conditions.presence_of_element_located(
                        (By.XPATH, "//table[@id='result_list']/tbody/tr/th/a")
                    )
                )
                driver.find_element(
                    By.XPATH, "//*[@id='nav-sidebar']/div[2]/table/tbody/tr[6]/td/a"
                ).click()
                relatedPosts = driver.find_elements(
                    By.XPATH, "//*[@id='id_relatedPost']/option"
                )
                for relatedPost in relatedPosts:
                    if name == relatedPost.text:
                        relatedPost.click()
                # driver.find_element(By.ID, "id_sectionTitle").send_keys(sectionTitle)
            driver.find_element(By.ID, "id_title").send_keys(title)

        if content[0] == "Paragraph":
            window_before = driver.window_handles[0]
           # print (window_before)
            WebDriverWait(driver,30).until(expected_conditions.presence_of_element_located((By.CSS_SELECTOR, "#add_id_postSectionElements > img")))

            driver.find_element(By.CSS_SELECTOR, "#add_id_postSectionElements > img").click()
            window_after = driver.window_handles[1]
            get_url=driver.title
           # print("The current url is:"+str(get_url))
            #print("The current handle is:"+str(window_before))
            driver.switch_to.window(window_after)
            
            get_url=driver.title
          #  print("The current url is:"+str(get_url))
          #  print("The current handle is:"+str(window_after))
           # print(window_after)
            WebDriverWait(driver,30).until(expected_conditions.number_of_windows_to_be(2))
            WebDriverWait(driver,30).until(expected_conditions.presence_of_element_located((By.XPATH, "/html/body/div[1]/div/div/div[1]/div/form/div/fieldset/div[1]/div/div/div/div/div/iframe")))
            iframe = driver.find_element(By.XPATH, "/html/body/div[1]/div/div/div[1]/div/form/div/fieldset/div[1]/div/div/div/div/div/iframe")   
            # switch to selected iframe
            driver.switch_to.frame(iframe)
            

    
            WebDriverWait(driver,30).until(expected_conditions.number_of_windows_to_be(2))
            

            driver.find_element(By.CLASS_NAME,"cke_editable").click()
            driver.find_element(By.CLASS_NAME,"cke_editable").send_keys(content[1])
            driver.switch_to.default_content()
            driver.find_element(By.NAME, "_save").click()


            WebDriverWait(driver,30).until(expected_conditions.number_of_windows_to_be(1))
            driver.switch_to.window(window_before)

        if content[0] == "Image":
                window_before = driver.window_handles[0]
               # print (window_before)
                driver.find_element(By.CSS_SELECTOR, "#add_id_postSectionElements > img").click()
                window_after = driver.window_handles[1]
                driver.switch_to.window(window_after)
               # print(window_after)
                WebDriverWait(driver,30).until(expected_conditions.number_of_windows_to_be(2))
                driver.find_element(
                    By.ID, "id_cloudinaryimg" 
                ).send_keys(
                    os.path.abspath(
                        "./CreatePostInput/" + postImageList[imageCount]
                    )
                )
                imageCount += 1
                driver.find_element(By.NAME, "_save").click()
                driver.switch_to.window(window_before)

    # WebDriverWait(driver,30).until(expected_conditions.presence_of_element_located((By.XPATH, "//table[@id=\'result_list\']/tbody/tr/th/a")))
    driver.find_element(By.NAME, "_save").click()
    WebDriverWait(driver,30).until(expected_conditions.number_of_windows_to_be(1))

deviceList = [
    [
        "<DeviceName>",
        "<DeviceDescription>",
        "<WorkingVoltage>",
        "<WorkingCurrent>",
        "<ApproximatedPrice>",
    ],
]
imageList = []
imageIndex = 0
subcategoryList = []
postDeviceList = ["<DeviceName>"]
outputDocument = Document()
document = Document(os.path.abspath("./CreatePostInput/postInput.docx"))
postContent = []


driver = webdriver.Chrome(executable_path=os.path.abspath("./chromedriver-win64/chromedriver.exe"))
driver.get("http://127.0.0.1:8000/admin/")
# driver.get("https://kurio7.pythonanywhere.com//admin/login/?next=/admin/")
driver.set_window_size(1536, 840)
driver.find_element(By.ID, "id_username").send_keys("alvaroarchilla")
driver.find_element(By.ID, "id_password").send_keys("vetpalispe")
driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()
driver.find_element(By.LINK_TEXT, "ElectronicComponents").click()

getImageList(imageList)

for p in document.paragraphs:
    try:
        if p.style.name.startswith("Heading 1"):
            outputDocument.add_heading(p.text, 1)
            # postName=p.text.replace(" ", "_")
            print(p.style.name)
            x = ["Title", p.text]
            postContent.append(x)
            # print(postContent)
        elif p.style.name.startswith("Heading 2"):
            outputDocument.add_heading(p.text, 2)
            print(p.style.name)
            x = ["sectionTitle", p.text]
            postContent.append(x)
            # print(postContent)
        else:
            # outputDocument.add_heading(p.text,2)
            if p.text.startswith("[IMAGE"):
                outputDocument.add_picture(
                    "./CreatePostInput/" + imageList[imageIndex + 1]
                )
                x = ["Image", imageList[imageIndex + 1]]
                postContent.append(x)
                # print(postContent)
                imageIndex += 1

            elif p.text.startswith("[NOMBRE DEL TUTORIAL] "):
                x = p.text.split("[NOMBRE DEL TUTORIAL] ")
                postName = x[1]
                print(postName)
            elif p.text.startswith("[CATEGORÍA] "):
                x = p.text.split("[CATEGORÍA] ")
                postCategory = x[1]
                print(postCategory)
            elif p.text.startswith("[SUBCATEGORÍA] "):
                x = p.text.split("[SUBCATEGORÍA] ")
                postSubcategories = x[1]
                # print(postSubcategories)
                subcategoryList = postSubcategories.split(" | ")
                postMainSubcategory = subcategoryList[0]
                # print(postMainsubcategory)
            else:
                outputDocument.add_paragraph(p.text)
                if p.text != "" and p.text != "\n":
                    if p.text.startswith("["):
                        print("Document Line Ommited!")
                    else:
                        x = ["Paragraph", p.text]
                        postContent.append(x)
                # print(postContent)
            # print(p.style.name)
    except:
        print("Except")
print(postContent)
newPost(
    postName,
    postName,
    postCategory,
    subcategoryList,
    postMainSubcategory,
    postDeviceList,
    imageList,
)

outputPath = "./" + "CreatePostOutput/" + postName

try:
    os.mkdir(os.path.abspath(outputPath))
except:
    print("No se pude crear la carpeta")
outputDocument.save(
    "./" + "CreatePostOutput/" + postName + "/" + postName + "_createdPost.docx"
)
# document.save('your_doc_name.docx')
print("Previous file was corrupted or didn't exist - new file was created.")

driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()


class TestCreateElectronicComponent:
    def setup_method(self, method):
        print(os.path.abspath("tools/chromedriver.exe"))
        self.driver = webdriver.Chrome(
            executable_path=os.path.abspath("tools/chromedriver.exe")
        )
        self.vars = {}

    # def teardown_method(self, method):


#   self.driver.quit()
